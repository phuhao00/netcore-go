# NetCore-Go Kubernetes部署配置
# Author: NetCore-Go Team
# Created: 2024

apiVersion: apps/v1
kind: Deployment
metadata:
  name: netcore-go-server
  namespace: netcore-go
  labels:
    app: netcore-go-server
    version: v1.0.0
    component: server
    part-of: netcore-go
    managed-by: kubernetes
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: netcore-go-server
  template:
    metadata:
      labels:
        app: netcore-go-server
        version: v1.0.0
        component: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: netcore-go-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: netcore-go-server
        image: netcore-go/server:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: https
          containerPort: 8443
          protocol: TCP
        - name: grpc
          containerPort: 9000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        - name: health
          containerPort: 8081
          protocol: TCP
        env:
        - name: SERVER_HOST
          value: "0.0.0.0"
        - name: SERVER_PORT
          value: "8080"
        - name: SERVER_HTTPS_PORT
          value: "8443"
        - name: GRPC_PORT
          value: "9000"
        - name: METRICS_PORT
          value: "9090"
        - name: HEALTH_PORT
          value: "8081"
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "json"
        - name: ENVIRONMENT
          value: "production"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - configMapRef:
            name: netcore-go-config
        - secretRef:
            name: netcore-go-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: health
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: health
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: health
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: config-volume
          mountPath: /etc/netcore-go
          readOnly: true
        - name: tls-certs
          mountPath: /etc/ssl/certs/netcore-go
          readOnly: true
        - name: logs
          mountPath: /var/log/netcore-go
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: netcore-go-config
          defaultMode: 0644
      - name: tls-certs
        secret:
          secretName: netcore-go-tls
          defaultMode: 0600
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - netcore-go-server
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: netcore-go-server-service
  namespace: netcore-go
  labels:
    app: netcore-go-server
    component: server
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: https
    protocol: TCP
  - name: grpc
    port: 9000
    targetPort: grpc
    protocol: TCP
  selector:
    app: netcore-go-server
  sessionAffinity: None
  externalTrafficPolicy: Cluster

---
apiVersion: v1
kind: Service
metadata:
  name: netcore-go-server-headless
  namespace: netcore-go
  labels:
    app: netcore-go-server
    component: server
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: https
    port: 8443
    targetPort: https
    protocol: TCP
  - name: grpc
    port: 9000
    targetPort: grpc
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: netcore-go-server

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: netcore-go-config
  namespace: netcore-go
  labels:
    app: netcore-go-server
    component: config
data:
  server.yaml: |
    server:
      host: "0.0.0.0"
      port: 8080
      https_port: 8443
      grpc_port: 9000
      read_timeout: 30s
      write_timeout: 30s
      idle_timeout: 120s
      max_header_bytes: 1048576
    
    tls:
      enabled: true
      cert_file: "/etc/ssl/certs/netcore-go/tls.crt"
      key_file: "/etc/ssl/certs/netcore-go/tls.key"
      min_version: "1.2"
      max_version: "1.3"
    
    logging:
      level: "info"
      format: "json"
      output: "stdout"
      file: "/var/log/netcore-go/server.log"
      max_size: 100
      max_backups: 3
      max_age: 7
      compress: true
    
    metrics:
      enabled: true
      port: 9090
      path: "/metrics"
      namespace: "netcore_go"
    
    health:
      enabled: true
      port: 8081
      path: "/health"
    
    discovery:
      type: "kubernetes"
      namespace: "netcore-go"
      label_selector: "app=netcore-go-server"
    
    middleware:
      cors:
        enabled: true
        allowed_origins: ["*"]
        allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
        allowed_headers: ["*"]
        max_age: 86400
      
      rate_limit:
        enabled: true
        requests_per_second: 100
        burst: 200
      
      compression:
        enabled: true
        level: 6
        types: ["text/html", "text/css", "text/javascript", "application/json"]

---
apiVersion: v1
kind: Secret
metadata:
  name: netcore-go-secrets
  namespace: netcore-go
  labels:
    app: netcore-go-server
    component: secrets
type: Opaque
data:
  # Base64编码的密钥，实际部署时需要替换
  jwt_secret: bmV0Y29yZS1nby1qd3Qtc2VjcmV0
  database_password: cGFzc3dvcmQ=
  redis_password: cmVkaXNwYXNzd29yZA==
  api_key: YXBpa2V5MTIzNDU2

---
apiVersion: v1
kind: Secret
metadata:
  name: netcore-go-tls
  namespace: netcore-go
  labels:
    app: netcore-go-server
    component: tls
type: kubernetes.io/tls
data:
  # Base64编码的TLS证书和私钥，实际部署时需要替换
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: netcore-go-service-account
  namespace: netcore-go
  labels:
    app: netcore-go-server
    component: rbac
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: netcore-go-cluster-role
  labels:
    app: netcore-go-server
    component: rbac
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: netcore-go-cluster-role-binding
  labels:
    app: netcore-go-server
    component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: netcore-go-cluster-role
subjects:
- kind: ServiceAccount
  name: netcore-go-service-account
  namespace: netcore-go

---
apiVersion: v1
kind: Namespace
metadata:
  name: netcore-go
  labels:
    name: netcore-go
    app: netcore-go
    environment: production
  annotations:
    description: "NetCore-Go application namespace"